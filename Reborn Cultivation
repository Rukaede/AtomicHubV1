local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Atomic Hub       by: itzRealEzra",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Atomic Interface Suite",
   LoadingSubtitle = "by itzRealEzra",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Main = Window:CreateTab("Main", nil) -- Title, Image
local Section = Main:CreateSection("Auto Farm")

-- add this where you create other buttons (you already have `Main` and `Rayfield` in scope)
Main:CreateButton({
    Name = "‚ùå Close GUI",
    Callback = function()
        local ok, err = pcall(function()
            -- 1) Preferred: use Rayfield API to hide UI
            if Rayfield and typeof(Rayfield) == "Instance" and Rayfield.SetVisibility then
                Rayfield:SetVisibility(false)
                return
            end

            -- 2) Fallback: destroy the Rayfield instance if it exposes :Destroy()
            if Rayfield and typeof(Rayfield) == "Instance" and Rayfield.Destroy then
                Rayfield:Destroy()
                return
            end

            -- 3) Last fallback: try CoreGui (use WaitForChild / safe checks)
            local CoreGui = game:GetService("CoreGui")
            local gui = CoreGui:FindFirstChild("Rayfield") or CoreGui:FindFirstChild("Rayfield-Old")
            if not gui then
                -- Wait a little (timeout) in case of race
                gui = CoreGui:WaitForChild("Rayfield", 2) -- returns nil after timeout
            end
            if gui and gui.Destroy then
                gui:Destroy()
            end
        end)

        if not ok then
            -- Helpful debug message in Output without throwing more errors
            warn("Close GUI callback failed: " .. tostring(err))
            -- a final no-crash attempt to hide via API if it exists
            pcall(function() if Rayfield and Rayfield.SetVisibility then Rayfield:SetVisibility(false) end end)
        end
    end,
})
