-- FULL Rayfield Auto-Craft (drop-in)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Atomic Hub       by: itzRealEzra",
   LoadingTitle = "Atomic Interface Suite",
   LoadingSubtitle = "by itzRealEzra",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",
   ConfigurationSaving = { Enabled = true, FolderName = nil, FileName = "Big Hub" }
})

local Main = Window:CreateTab("Main", nil)
Main:CreateSection("Auto Farm")

local Misc = Window:CreateTab("Misc", nil)
Misc:CreateButton({
   Name = "Close GUI",
   Callback = function() Rayfield:Destroy() end,
})

-- ========= CONFIG: fill recipes to match your screenshot/game =========
local PillRecipes = {
    ["Awakening Qi Pill"] = {"Ginseng", "Ginseng", "Spirit Grass", "Spirit Grass"},
    ["Perfect Qi Pill"]   = {"Ginseng", "Spirit Grass", "Spirit Grass", "Lotus"},
    ["Moonlight Qi Pill"] = {"Moonlight Flower", "Moonlight Flower", "Moonlight Flower", "Moonlight Flower"},
    ["Nine Rotations Pill"] = {"Blood Flower", "Blood Flower", "Blood Flower", "Blood Flower"},
    -- add more here if needed
}
-- =====================================================================

-- build sorted list of pill names for the dropdown
local pillOptions = {}
for k,_ in pairs(PillRecipes) do table.insert(pillOptions, k) end
table.sort(pillOptions)

-- runtime / ui state
local selectedPill = pillOptions[1] or nil
local selectedRarity = "100"
local craftAmount = 2500      -- default number of times to fire
local perIngredient = 1       -- last arg in your args list
local delayTime = 0.01
local autoCrafting = false

-- Pill dropdown
Main:CreateDropdown({
    Name = "Choose Pill",
    Options = pillOptions,
    CurrentOption = selectedPill or "None",
    Flag = "PillDrop",
    Callback = function(option)
        selectedPill = option
        print("[AutoCraft] Selected pill ->", selectedPill)
    end,
})

-- Rarity dropdown
Main:CreateDropdown({
    Name = "Choose Rarity",
    Options = {"1","10","100","1000","10000","100000"},
    CurrentOption = selectedRarity,
    Flag = "RarityDrop",
    Callback = function(option)
        selectedRarity = option
        print("[AutoCraft] Selected rarity ->", selectedRarity)
    end,
})

-- Amount input (how many times to loop; 0 = infinite)
Main:CreateInput({
    Name = "Amount to craft (0 = infinite)",
    PlaceholderText = tostring(craftAmount),
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local n = tonumber(text)
        if n and n >= 0 then craftAmount = n
        else craftAmount = 2500 end
        print("[AutoCraft] craftAmount set ->", craftAmount)
    end,
})

local selectedPill = nil
local selectedRarity = "100" -- Default rarity
local craftAmount = 1
local delayBetweenCrafts = 0.05 -- ðŸ•’ Delay between fires (in seconds)
local autoCrafting = false

-- Helper: build args exactly like your working example
local function buildArgs(herbs, rarity, per)
    local args = {}
    for i = 1, #herbs do
        -- keep spaces in herb names (must match server exact string)
        table.insert(args, "Herb_" .. herbs[i] .. "_" .. tostring(rarity))
    end
    table.insert(args, tonumber(per) or 1)
    return args
end

-- Background auto-craft toggle (start/stop)
Main:CreateToggle({
    Name = "Auto Craft (toggle)",
    CurrentValue = false,
    Flag = "AutoCraftToggle",
    Callback = function(val)
        autoCrafting = val
        print("[AutoCraft] Toggle ->", tostring(val))

        if not autoCrafting then
            return -- the loop checks autoCrafting and will stop
        end

        -- spawn the loop so UI remains responsive
        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Events = ReplicatedStorage:FindFirstChild("Events")
            if not Events then
                warn("[AutoCraft] ERROR: ReplicatedStorage.Events not found")
                autoCrafting = false
                return
            end
            local CraftPill = Events:FindFirstChild("CraftPill")
            if not CraftPill then
                warn("[AutoCraft] ERROR: CraftPill remote not found at ReplicatedStorage.Events.CraftPill")
                autoCrafting = false
                return
            end

            if not selectedPill or not PillRecipes[selectedPill] then
                warn("[AutoCraft] ERROR: Selected pill invalid:", tostring(selectedPill))
                autoCrafting = false
                return
            end
            if not selectedRarity then
                warn("[AutoCraft] ERROR: No rarity selected")
                autoCrafting = false
                return
            end

            local herbs = PillRecipes[selectedPill]
            local args = buildArgs(herbs, selectedRarity, perIngredient)
            print("[AutoCraft] Starting. Pill:", selectedPill, "Rarity:", selectedRarity, "Amount:", craftAmount, "PerIngredient:", perIngredient)

            local fired = 0
            while autoCrafting do
                if craftAmount ~= 0 and fired >= craftAmount then break end

                local ok, err = pcall(function()
                    CraftPill:FireServer(unpack(args))
                end)

                if not ok then
                    warn("[AutoCraft] FireServer failed:", err)
                    autoCrafting = false
                    break
                end

                fired = fired + 1
                if fired % 100 == 0 then print("[AutoCraft] Fired:", fired) end

                task.wait(delayTime)
            end

            print("[AutoCraft] Stopped. Total fired:", fired)
            -- ensure UI toggle reflects stopped state (Rayfield will persist last value; we just make local state false)
            autoCrafting = false
        end)
    end,
})

-- One-shot test button (sends loop exactly craftAmount times as a quick test)
Main:CreateButton({
    Name = "Start One-shot (runs selected amount)",
    Callback = function()
        print("[AutoCraft] One-shot pressed")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Events = ReplicatedStorage:FindFirstChild("Events")
        if not Events then warn("[AutoCraft] Events missing") return end
        local CraftPill = Events:FindFirstChild("CraftPill")
        if not CraftPill then warn("[AutoCraft] CraftPill missing") return end
        if not selectedPill or not PillRecipes[selectedPill] then warn("[AutoCraft] Invalid pill selected") return end
        if not selectedRarity then warn("[AutoCraft] Invalid rarity selected") return end

        local herbs = PillRecipes[selectedPill]
        local args = buildArgs(herbs, selectedRarity, perIngredient)
        print("[AutoCraft] One-shot will run:", craftAmount, "times with args:", table.concat(args, ", "))

        for i = 1, (craftAmount == 0 and 2500 or craftAmount) do
            local ok, err = pcall(function()
                CraftPill:FireServer(unpack(args))
            end)
            if not ok then
                warn("[AutoCraft] One-shot FireServer failed:", err)
                break
            end
            task.wait(delayTime)
        end
        print("[AutoCraft] One-shot complete")
    end,
})

-- final message
print("[AutoCraft] Ready. Open Output (F9). Select a pill + rarity, set amount/delay, then toggle or press One-shot.")
