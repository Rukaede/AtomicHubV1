local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Atomic Hub       by: itzRealEzra",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Atomic Interface Suite",
   LoadingSubtitle = "by itzRealEzra",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Main = Window:CreateTab("Main", nil) -- Title, Image
local Section = Main:CreateSection("Auto Farm")

local Misc = Window:CreateTab("Misc", nil) -- Title, Image
local DestroyButton = Misc:CreateButton({
   Name = "Close GUI",
   Callback = function()
      Rayfield:Destroy()
   end,
})

-- ðŸ”¹ Pill Recipes table (PillName -> HerbName)
local PillRecipes = {
   ["Awakening Qi Pill"] = "Ginseng", "Ginseng", "Spirit Grass", "Spirit Grass"
}

-- Store selections
local selectedRecipe = nil
local selectedRarity = nil

local Pill = Main:CreateDropdown({
   Name = "Choose Pill",
   Options = {"Awakening Qi Pill","Perfect Qi Pill"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "PillDrop", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
		selectedOption = Option
		print("Selected:", selectedOption)
   end,
})

local Rarity = Main:CreateDropdown({
   Name = "Choose Rarity",
   Options = {"1", "10", "100", "1000", "10000", "100000"},
   CurrentOption = "None",
   Flag = "RarityDrop",
   Callback = function(Option)
      selectedRarity = Option
      print("Selected Rarity:", selectedRarity)
   end,
})

local AutoCraft = Main:CreateButton({
   Name = "Craft Pill",
   Callback = function()
      if not selectedPill or not selectedRarity then
         warn("âš  Please select both pill and rarity first!")
         return
      end

      -- Look up herb recipe for chosen pill
      local herb = PillRecipes[selectedPill]

      -- Build ingredient string: Herb_<HerbName>_<Rarity>
      local ingredient = "Herb_" .. herb .. "_" .. selectedRarity

      local args = {
         ingredient,
         ingredient,
         ingredient,
         ingredient,
         1 -- how many of each ingredient
      }

      print("ðŸ”¨ Crafting:", selectedPill, "with ->", ingredient)

      local CraftPill = game:GetService("ReplicatedStorage").Events.CraftPill
      CraftPill:FireServer(unpack(args))
   end,
})
